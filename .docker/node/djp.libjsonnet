local ddb = import 'ddb.docker.libjsonnet';

local defaultName = ddb.File(std.thisFile).parent.name;

// Docker compose configuration factory for this package.
local factory(name, params={}) =
  // Sanitize and set params default values in o using ddb.params.value and ddb.params.array.
  local o = {
    // param1: ddb.params.value(params, 'param1', 'default1'),
    // param2: ddb.params.array(params, 'param2', ['default2']),
  };

  // Return a docker compose configuration that should configure this package inside a global configuration.
  {
    services+: {
      [name]+:
        ddb.Build(defaultName) +
        ddb.User() +
        ddb.Binary('node', '/project', 'node', exe=true) +
        ddb.Binary('npm', '/project', 'npm', exe=true) +
        ddb.Binary('npx', '/project', 'npx', exe=true) +
        {
          tty: true,
          volumes+: [
            ddb.path.project + ':/project',
            name + '-cache:/home/node/.cache',
            name + '-npm-packages:/home/node/.npm-packages',
          ],
        },
    },
  };

{
  factory: factory,
  defaultName: defaultName,
}
